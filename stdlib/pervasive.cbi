/*
 * Copyright (c) 2010-2012, Marwan Burelle, the LSE Team and contributors
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *   * Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in the
 *     documentation and/or other materials provided with the distribution.
 *   * Neither the name of the <organization> nor the
 *     names of its contributors may be used to endorse or promote products
 *     derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL MARWAN BURELLE BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
 * DAMAGE.
 */

/* C! pervasives definitions */

/*
 * The purpose of this file is to provide standard definitions for
 * every C! programs such as architecture dependant types or mapping
 * to usual C types.
 */

/*
 * This file is intended to be automatically loaded and opened.
 */

/*
 * Configuration (architecture dependant code) will be done at
 * compile/install time using perl/C code.
 */

/* Now our types */

// The usual C integer types
typedef   cint = int<INT_SIZE>;
typedef  ucint = int<+INT_SIZE>;
typedef  short = int<16>;
typedef ushort = int<+16>;
typedef   byte = int<8>;
typedef  ubyte = int<+8>;
typedef   long = int<LONG_SIZE>;
typedef  ulong = int<+LONG_SIZE>;

// signed and unsigned word sized integer
typedef  word = int<ARCH_WORD_SIZE>;
typedef uword = int<+ARCH_WORD_SIZE>;
typedef  size = int<+ARCH_WORD_SIZE>;
typedef size_t = size;

// Constants
#NULL: void* = (0:void*);

// Extrem values
#max_cint: cint = MAX_INT;
#min_cint: cint = MIN_INT;
#max_ucint: ucint = MAX_UINT;
#max_size: size = ((-1):size);
#max_int64: int<64> = MAX_64INT;

/* END */
