/*
 * Copyright (c) 2010-2012, Marwan Burelle, the LSE Team and contributors
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *   * Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in the
 *     documentation and/or other materials provided with the distribution.
 *   * Neither the name of the <organization> nor the
 *     names of its contributors may be used to endorse or promote products
 *     derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL MARWAN BURELLE BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
 * DAMAGE.
 */


/* Wrapper for malloc familly functions */

// Testing wrapper

import libc_alloc;
include "assert.h";

assert(p : cint) : void as assert;

main() : cint
{
  tab : cint*;
  tab = libc_alloc::malloc(256 * sizeof (cint));
  assert(tab != NULL);

  for (i : size_t = 0; i<256; ++i)
    tab[i] = i;

  for (i : cint = 0; i<256; ++i)
    assert(tab[i] == i);

  libc_alloc::free(tab);

  tab = libc_alloc::calloc(256, sizeof (cint));
  assert(tab != NULL);

  for (i : cint = 0; i<256; ++i)
    assert(tab[i] == 0);

  for (i : size_t = 0; i<256; ++i)
    tab[i] = i;

  for (i : cint = 0; i<256; ++i)
    assert(tab[i] == i);

  libc_alloc::free(tab);

  tab = libc_alloc::malloc(256 * sizeof (cint));
  assert(tab != NULL);

  for (i : size_t = 0; i<256; ++i)
    tab[i] = i;

  for (i : cint = 0; i<256; ++i)
    assert(tab[i] == i);

  tab = libc_alloc::realloc(tab, 512 * sizeof (cint));

  for (i : cint = 0; i<256; ++i)
    assert(tab[i] == i);

  for (i : size_t = 256; i<512; ++i)
    tab[i] = i;

  for (i : cint = 0; i<512; ++i)
    assert(tab[i] == i);

  libc_alloc::free(tab);

  return 0;
}
